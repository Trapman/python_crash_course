#Reading a File: file_reader.py #######################
with open('sample_text.txt') as file_object:
    contents = file.object.read()
print(contents)

# the output by default has a blank line at the end. 

#Run this without the blank line at the end: add rstrip()
with open('sample_text.txt') as file_object:
    contents = file.object.read()
print(contents.rstrip())

# note that the file path here where be where ever your current directory is

#Run this to specify a path
file_path = '/home/dtrapman/other_files/text_files/file_name.txt'
with open(file_path) as file_object:
    
#Reading line by line: use a for loop
file_name = 'trap_intel'
with open(file_name) as file_object:
    for line in file_object:
        print(line)   #or print(line.rstrip()) to remove the white space at the end

#Making a List of Lines from a File:
'''
in short, when you use WITH, the file object returned by OPEN() is only available
inside the WITH block that contains it. So to retain access to the contents outside
of the WITH you can store them in a list inside the block, and then work with
that list outside of the list
'''
file_name = 'trap_intel'

with open(filename) as file_object:
    lines = file_object.readlines()
    
    for line in lines:
        print(line.rstrip())
        
#Working with a File's Contents
'''
once you read a file into memory, you can do whatever you want to it.
here's a quick example of building a single string containing all the digits
in the file with no whitespace in it'
'''
filename = 'pi_digits.txt'

with open(filename) as file_object:
    lines = file_object.readlines()

pi_string = ''
for line in lines:
    pi_string += line.strip()
    
print(pi_string)
print(len(pi_string))

#Large Files: One Million Digits

filename = 'pi_million_digits.txt'

with open(filename) as file_object:
    lines = file_object.readlines()
    pi_string = ''
    for lines in line:
        pi_string += line.strip()
    
    print(f"{pi_string[:52}...")    #we'll just print the first 52 digits here
    print(len(pi_string))
    
# is your bday in Pi?
birthday = input("Enter your birthday, in the form of MMDDYY: ")
if birthday in pi_string:
    print("Your birthday appears in the first million digits of pi!")
else:
    print("Your birthday does not appear in the first million digits of pi.")

##################
#Writing to a file

# Writing to an empty file: saves data to a file (overwrites if the file exists)
filename = 'programming.txt'

with open(filename, 'w') as file_object:
    file_object.write("Python is my favorite language.")
    
# Writing multiple line: use \n to get the spacing right
filename = 'programming.txt'

with open(filename, 'w') as file_object:
    file_object.write('Python is my favorite language.\n')
    file_object.write('I plan to use it to build video games.\n')
    
# Appending to a file: 
filename  = 'programming.txt'

with open(filename, 'a') as file_object:
    file_object.write("I also want to use Python to run betting models.\n")
    file_object.write("In addition, I will use it to write mobile apps.\n")
    
################# Practice ##########
filename = 'guest.txt'
guest_name = input("Please enter your first and last name so we can add to the guest book.")

with open(filename, "a") as file_object:
    file_object.write(guest_name)
