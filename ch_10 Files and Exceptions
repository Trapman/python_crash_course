###Reading a File: file_reader.py ##
with open('sample_text.txt') as file_object:
    contents = file.object.read()
print(contents)

# the output by default has a blank line at the end. 

#Run this without the blank line at the end: add rstrip()
with open('sample_text.txt') as file_object:
    contents = file.object.read()
print(contents.rstrip())

# note that the file path here where be where ever your current directory is

#Run this to specify a path
file_path = '/home/dtrapman/other_files/text_files/file_name.txt'
with open(file_path) as file_object:
    
#Reading line by line: use a for loop
file_name = 'trap_intel'
with open(file_name) as file_object:
    for line in file_object:
        print(line)   #or print(line.rstrip()) to remove the white space at the end

#Making a List of Lines from a File:##
'''
in short, when you use WITH, the file object returned by OPEN() is only available
inside the WITH block that contains it. So to retain access to the contents outside
of the WITH you can store them in a list inside the block, and then work with
that list outside of the list
'''
file_name = 'trap_intel'

with open(filename) as file_object:
    lines = file_object.readlines()
    
    for line in lines:
        print(line.rstrip())
        
#Working with a File's Contents
'''
once you read a file into memory, you can do whatever you want to it.
here's a quick example of building a single string containing all the digits
in the file with no whitespace in it'
'''
filename = 'pi_digits.txt'

with open(filename) as file_object:
    lines = file_object.readlines()

pi_string = ''
for line in lines:
    pi_string += line.strip()
    
print(pi_string)
print(len(pi_string))

#Large Files: One Million Digits

filename = 'pi_million_digits.txt'

with open(filename) as file_object:
    lines = file_object.readlines()
    pi_string = ''
    for lines in line:
        pi_string += line.strip()
    
    print(f"{pi_string[:52}...")    #we'll just print the first 52 digits here
    print(len(pi_string))
    
# is your bday in Pi?
birthday = input("Enter your birthday, in the form of MMDDYY: ")
if birthday in pi_string:
    print("Your birthday appears in the first million digits of pi!")
else:
    print("Your birthday does not appear in the first million digits of pi.")

##################
#Writing to a file

# Writing to an empty file: saves data to a file (overwrites if the file exists)
filename = 'programming.txt'

with open(filename, 'w') as file_object:
    file_object.write("Python is my favorite language.")
    
# Writing multiple line: use \n to get the spacing right
filename = 'programming.txt'

with open(filename, 'w') as file_object:
    file_object.write('Python is my favorite language.\n')
    file_object.write('I plan to use it to build video games.\n')
    
# Appending to a file: 
'''
this is for adding content to a file instead of writing over existing content.
basically you will open the file in APPEND MODE and any lines you write will bne added at the
end of the file. 
'''
filename  = 'programming.txt'

with open(filename, 'a') as file_object:
    file_object.write("I also want to use Python to run betting models.\n")
    file_object.write("In addition, I will use it to write mobile apps.\n")
    
################# Practice ##########
filename = 'guest.txt'
guest_name = input("Please enter your first and last name so we can add to the guest book.")

with open(filename, "a") as file_object:
    file_object.write(guest_name)
    
#############################

#Exceptions

# Try-Except: ZeroDivisionError
'''
basically we will use this when we have an idea of a specific error that 
might occur. And then we tell Python what to do when it happens
'''
try:
    print(5/0)
except ZeroDivisionError:
    print("You can't divide by zero!")
    
# Exceptions to prevent crashes: Else Block
'''
handling errors is especially important when the program has more work to do
after the error occurs. this allows the program to continue without crashing
'''
print("Give me two numbers, and I will divide them.")
print("enter 'q' to quit.")

while True:
    first_number = input("\nFirst number: ")
    if first_number == 'q':
        break
    second_number = input("Second number: ")
    if second_number == 'q':
        break
    try:
        answer = int(first_number) / int(second_number)
    except ZeroDivisionError:
        print("You can't divide by zero!")
    else:
        print(answer)

#FileNotFoundError
'''
handling a missing file is quite common
'''
filename = "trap_intel3.txt"

try:
    with open(filename, encoding = 'utf-8') as f:
        contents = f.read()
except FileNotFoundError:
    print(f"Sorry, the file {filename} does not exist.")

#Analyzing text:
'''
let's analyze text files containing entire books. http://gutenberg.org has a
bunch of classics we can use
'''
filename = 'CountOfMonteCristo.txt'

try:
    with open(filename, encoding = 'utf-8') as f:
        contents = f.read()
    except FileNotFoundError:
        print(f"Sorry, the file {filename} does not exist.")
    else:
        # count the number of words in the file
        words = contents.split()
        num_words = len(words)
        print(f"The file {filename} has about {num_words} words.")
        
# Working with multiple files
'''
same as above, but we'll make it into a function and work with more 
text file books
'''
def count_words(filename):
    """Count the approximate number of words in a file."""
    try: 
        with open(filename) as f:
            contents = f.read()
        except FileNotFoundError:
            print(f"Sorry, the file {filename} does not exist.")   #or you could simply use PASS to "silently" pass over this error
        else: 
            words = contents.split()
            num_words = len(words)
            print(f"The file {filename} has about {num_words} words.")
        
filename = 'countofmontecristo.txt'
count_words(filename)

filenames = ['countofmontecristo.txt', 'screwtapeletters.txt', 'thusspokezarathustra.txt']
for filename in filenames:
    count_words(filename)

####################
#Storing Data
'''
Often times you will ask users for input and you will need to store the data,
usually as a list or dict
'''

#JSON

#json.dump() stores data
#json.load() loads the stored data

# this short program stores a set of numbers
import json

numbers = [2,3,4,6,7,11,13]

filename = 'numbers.json'
with open(filename, 'w') as f:
    json.dump(numbers, f)
    
# this short program reads these numbers back into memory
import json

filename = 'numbers.json'
with open(filename) as f:
    numbers = json.load(f)

print(numbers)
#############
# saving and reading user-generated data 
'''
the first part will prompt the user to enter their name and then we store as a file.
the next part will greet a user whose name has already been stored.
'''
username = input("What is your name? ")

filename = 'username.json'
with open(filename, 'w') as f:
    json.dump(username, f)
    print(f"We'll remember you when you come back, {username}!")
    
####
import json

filename = 'username.json'

with open(filename) as f:
    username = json.load(f)
    print(f"Welcome back, {username}!")
    
########
# let's combine these two files into one

import json

# load the username, if it hase been store previously.
# otherwise, prompt for the username and store it.

filename = 'username.json'
try:
    with open(filename) as f:
        username = json.load(f)
except FileNotFoundError:
    username = input("WHat is your name? ")
    with open(filenam, 'w') as f:
        json.dump(username, f)
        print(f"We'll remember you when you come back, {username}!")
else:
    print(f"Welcome back, {username}!")
#Refactoring
'''
Often you'll notice something in your code that can be improved by breaking it up
into a bunch of functions that have specific jobs to make it more clean and efficient. 
This is called refactoring. Let's refactor the code above.

It looks like this can be broken up into 3 seperate functions:
    1. retrieves a stored username if it exists
    2. if user name doesn't exist, we will prompt the user for one
    3. greet the user
'''
import json

def get_stored_username():
    """Get stored user name if available"""
    filename = 'username.json'
    try:
        with open(filename) as f:
            username = json.load(f)
    except FileNotFoundError:
        return None
    else:
        return username

def get_new_username():
    """Prompt for a new username."""
    username = input("What is your name? ")
    filename = 'username.json'
    with open(filename, 'w') as f:
        json.dump(username, f)
    return username        
    
def greet_user():
    """Greet the user by name."""
    username = get_stored_username()
    if username:
        print(f"Welcome back, {username}!")
    else:
        username = get_new_username() 
        print(f"We'll remember you next time, {username}!")
        
greet_user()
